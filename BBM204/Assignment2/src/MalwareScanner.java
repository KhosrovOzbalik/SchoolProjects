import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.util.Map;
import java.util.Scanner;

/**
 * This class accomplishes Mission Firewall
 */
public class MalwareScanner {

    private final Map<String, Malware> malwareDB;

    public MalwareScanner(Map<String, Malware> malwareDB) {
        this.malwareDB = malwareDB;
    }

    /**
     * TODO: Open and read the input file while searching for threats
     * TODO: Write results to both; a new file name "scanLog.txt" and to the console
     *
     * @param filename the input file
     * @throws IOException the io exception
     */
    public void scanFile(String filename) throws IOException {
        // TODO: YOUR CODE HERE
        Scanner scanner = new Scanner(new File(filename));
        FileWriter writer = new FileWriter("scanLog.txt");

        System.out.println("Started scanning...");
        System.out.println("--------------------------------------------------------------------------------");

        int line = 1;
        int count = 0;
        while (scanner.hasNextLine()) {
            String currHash = turbo64(scanner.nextLine());
            if (malwareDB.containsKey(currHash)) {
                Malware malware = malwareDB.get(currHash);

                writer.write(currHash + "@" + String.valueOf(line) + '\n');

                System.out.println("Detected malware!");
                System.out.println("Name: " + malware.getTitle());
                System.out.println("Threat Level: " + String.valueOf(malware.getLevel()));
                System.out.println("Hash:" + malware.getHash());
                System.out.println("--------------------------------------------------------------------------------");
                count += 1;
            }
            line += 1;
        }

        System.out.println("Scan complete! " + String.valueOf(count) + " threats are found and eliminated. Generating log file...");
        writer.close();
    }

    public static String turbo64(String in) {
        // Implement turbo64 algorithm given by the assignment instructions
        // TODO: YOUR CODE HERE
        final long MOD_TURBO = 4294967291L;
        Long a = 0L;
        Long b = 1L;
        for (int i = 0; i < in.length(); i++) {
            a =  ((a + (int) in.charAt(i)) % MOD_TURBO);
            b =  ((a + b) % MOD_TURBO);
        }
        return Long.toHexString((b << 32) | a);
    }
}
